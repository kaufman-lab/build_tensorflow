# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tensorflow-version: [2.5]
        march: [skylake, skylake-avx512]
        mtune: [skylake, skylake-avx512, cascadelake]
    # Steps represent a sequence of tasks that will be executed as part of the job
   
    steps:
    - name: apt
      run: sudo apt-get update && sudo apt-get upgrade
      
    - name: Install GCC
      uses: egor-tensin/setup-gcc@v1
      with:
        # GCC version to install
        version: 11
        # Target platform
        platform: x64
        # Install Cygwin packages
        cygwin: 0
        # Set up cc/c++ executables
        cc: 1

    - name: Setup Python
      uses: actions/setup-python@v2.2.2
      with:
        python-version: 3.8
        architecture: x64

    - name: Setup Bazel
      run: |
        sudo apt-get update
        sudo apt-get install -y curl gnupg
        curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg
        sudo mv bazel.gpg /etc/apt/trusted.gpg.d/
        echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
        sudo apt update && sudo apt install bazel-4.1.0
        ls /usr/bin | grep bazel
        sudo update-alternatives --install /usr/bin/bazel bazel /usr/bin/bazel-4.1.0 50
        sudo update-alternatives --set bazel /usr/bin/bazel-4.1.0
        bazel --version 

    - uses: actions/checkout@v2
    
    - name: test if gh is installed
      run: gh
    
    - name: download tensorflow source
      #https://software.intel.com/content/www/us/en/develop/articles/intel-optimization-for-tensorflow-installation-guide.html
      run: |
        cd /tmp
        git clone https://github.com/tensorflow/tensorflow
        cd tensorflow
        git checkout r${{ matrix.tensorflow-version }}
        
    - name: build tensorflow
      #https://software.intel.com/content/www/us/en/develop/articles/intel-optimization-for-tensorflow-installation-guide.html
      run: |
          pip install numpy
          cd /tmp/tensorflow
          ls 
          bazel build --config=mkl --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" --copt="-march=${{ matrix.march }}" --copt="-mtune=${{ matrix.mtune }}" --copt="-O3" //tensorflow/tools/pip_package:build_pip_package
    
    - name: make wheel
      run: |
        mkdir /tmp/tensorflow_wheel
        bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_wheel

    - name: install and test wheel
      run: | 
        ls /tmp/tensorflow_wheel
        pip install --user /tmp/tensorflow_wheel
        python -c "import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))

    - name: test
      run: echo "bleh" >> /tmp/${{ matrix.march}}

    - uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: /tmp/${{ matrix.march}}

  release:
    runs-on: ubuntu-latest
    needs: build #this depends on successful completion of *all* matrix jobs.
    steps:
    - name: hellow world
      run: echo "hello world"
 

    - name: checkout
      uses: actions/checkout@v2
    - run: mkdir /tmp/artifcats
    - name: download all artifacts
      uses: actions/download-artifact@v2
      with:
        path: /tmp/artifcats
    - run: ls
    
